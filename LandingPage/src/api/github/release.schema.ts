import { z } from "zod";

// NOTE: autogenerated zod schema, uses https://docs.github.com/en/rest/releases/releases?apiVersion=2022-11-28#list-releases
export const ReleaseSchema = z
  .object({
    url: z.string().url(),
    html_url: z.string().url(),
    tarball_url: z.union([z.string().url(), z.null()]),
    zipball_url: z.union([z.string().url(), z.null()]),
    id: z.number().int(),
    tag_name: z.string().describe("The name of the tag."),
    target_commitish: z
      .string()
      .describe(
        "Specifies the commitish value that determines where the Git tag is created from."
      ),
    name: z.union([z.string(), z.null()]),
    body: z.union([z.string(), z.null()]).optional(),
    created_at: z.coerce.date(),
    published_at: z.union([z.coerce.date(), z.null()]),
    assets: z.array(
      z
        .object({
          url: z.string().url(),
          browser_download_url: z.string().url(),
          id: z.number().int(),
          node_id: z.string(),
          name: z.string().describe("The file name of the asset."),
          label: z.union([z.string(), z.null()]),
          state: z
            .enum(["uploaded", "open"])
            .describe("State of the release asset."),
          content_type: z.string(),
          size: z.number().int(),
          download_count: z.number().int(),
          created_at: z.string(),
          updated_at: z.string(),
        })
        .describe("Data related to a release.")
    ),
    mentions_count: z.number().int().optional(),
  })
  .describe("A release.");

export type Release = z.infer<typeof ReleaseSchema>;
